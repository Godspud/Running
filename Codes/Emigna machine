<!DOCTYPE html>
<html>
<head>
<meta charset='UTF-8'>
<style>
body { background:#000; color:#fff; font-family:monospace; padding:1em; }
input, textarea { background:#fff; color:#000; width:100%; margin:5px 0; padding:5px; border:1px solid #aaa; }
button { background:#fff; color:#111; padding:10px; font-weight:bold; cursor:pointer; }
</style>
</head>
<body>
<h2>Enigma Cipher</h2>
Message: <input id="message">
Seed: <input id="seed">
Plugboard (AM GL ET): <input id="plug">
<button onclick="encryptDecrypt()">Encrypt / Decrypt</button>
<p>Cipher: <textarea id="cipher" readonly></textarea></p>
<p>Decrypted: <textarea id="plain" readonly></textarea></p>

<script>
const ABC = ' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~';
const ROTORS = {
  I: { wiring: ABC.split('').sort(() => Math.random()-0.5).join(''), notch: ABC[10] },
  II: { wiring: ABC.split('').sort(() => Math.random()-0.5).join(''), notch: ABC[20] },
  III: { wiring: ABC.split('').sort(() => Math.random()-0.5).join(''), notch: ABC[30] }
};
const REFLECTOR = ABC.split('').reverse().join('');

function getSeedPositions(seed){
  let h=0; for(let i=0;i<seed.length;i++) h=(h<<5)-h+seed.charCodeAt(i);
  h=Math.abs(h); let p=''; for(let i=0;i<3;i++){ p+=ABC[h%ABC.length]; h=Math.floor(h/ABC.length); } 
  return p;
}

function Rotor(wiring, notch, position){
  this.wiring=wiring;
  this.notch=notch;
  this.position=ABC.indexOf(position);
  this.step=()=>{ this.position=(this.position+1)%ABC.length };
  this.atNotch=()=>ABC[this.position]===this.notch;
  this.forward=c=>ABC[(wiring.indexOf(c)+this.position)%ABC.length];
  this.backward=c=>ABC[(wiring.indexOf(c)-this.position+ABC.length)%ABC.length];
}

function plugboardSetup(pairs){
  let pb={}; ABC.split('').forEach(c=>pb[c]=c);
  for(let pair of pairs.split(' ')){
    if(pair.length===2){ pb[pair[0]]=pair[1]; pb[pair[1]]=pair[0]; }
  }
  return pb;
}

function enigma(message, seed, plugboardPairs){
  const pos=getSeedPositions(seed);
  const pb=plugboardSetup(plugboardPairs);
  const rotors=[ new Rotor(ROTORS.I.wiring, ROTORS.I.notch, pos[0]),
                 new Rotor(ROTORS.II.wiring, ROTORS.II.notch, pos[1]),
                 new Rotor(ROTORS.III.wiring, ROTORS.III.notch, pos[2]) ];
  let output='';
  for(let c of message){
    if(rotors[2].atNotch()) rotors[1].step();
    if(rotors[1].atNotch()) rotors[0].step();
    rotors[2].step();

    c = pb[c] || c;
    c = rotors[2].forward(c); c = rotors[1].forward(c); c = rotors[0].forward(c);
    c = REFLECTOR[ABC.indexOf(c)];
    c = rotors[0].backward(c); c = rotors[1].backward(c); c = rotors[2].backward(c);
    c = pb[c] || c;

    output += c;
  }
  return output;
}

function encryptDecrypt(){
  const msg = document.getElementById('message').value;
  const seed = document.getElementById('seed').value;
  const plug = document.getElementById('plug').value;
  const cipher = enigma(msg, seed, plug);
  document.getElementById('cipher').value = cipher;
  document.getElementById('plain').value = enigma(cipher, seed, plug);
}
</script>
</body>
</html>
